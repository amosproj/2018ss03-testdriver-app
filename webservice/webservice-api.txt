##################
# WEBSERVICE API #
##################

Please notice: All API calls require an HTTP Authorization header. The header is expected to look like this:

  Authorization: Basic <string>

where <string> is a base64-econded string in the format <username>:<password>.

Additionaly, to distinguish between different account roles, the client must provide a special header like this:

  X-ASEPART-Role: <role>

where <role> can be either Admin or User.

The following REST operations are available:

- Check if your username and password are correct.

  HTTP operation: GET
  Path:           /login
  Roles:          Admin, User
  Status code:    [200 OK]           if credentials are valid.
                  [401 Unauthorized] if credentials are not valid.

- List existing projects the admin is able to view

  HTTP operation: GET
  Path:           /projects
  Roles:          Admin
  Returns:        JSON array of projects.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.

- Create new ticket in project

  HTTP operation: POST
  Path:           /projects/{name}/tickets
  Request-Body:   Ticket information as JSON object.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if ticket is already in project or ticket/project does not exist.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin.

- List tickets of project

  HTTP operation: GET
  Path:           /projects/{name}/tickets
  Returns:        JSON array of tickets.
  Status code:    [200 OK]           in case of success
                  [401 Unauthorized] if the provided username or password is invalid,
                  [403 Forbidden]    if the authorized user is not an admin for the project.
                  [404 Not found]    if project does not exist.

- Create new project with an entry key

  HTTP operation: PUT
  Path:           /projects/{name}
  Roles:          Admin
  Request-Body:   Entry key as ASCII string.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if project already exists.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the specified user is not an admin.

- Add user to project

  HTTP operation: POST
  Path:           /projects/{name}/users/{username}
  Roles:          Admin
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user is already member of project or user/project does not exist.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin for the project.

- List users of project

  HTTP operation: GET
  Path:           /projects/{name}/users
  Roles:          Admin
  Returns:        JSON array of users.
  Status code:    [200 OK]           in case of success
                  [401 Unauthorized] if the provided username or password is invalid,
                  [403 Forbidden]    if the authorized user is not an admin for the project.
                  [404 Not found]    if project does not exist.

- Join project as user

  HTTP operation: POST
  Path:           /join
  Roles:          User
  Request-Body:   Entry key as ASCII string.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user has already joined.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not a member of the project.
                  [404 Not found]    if entry key is invalid.

- Get name of the project the user got an entry key for

  HTTP operation: GET
  Path:           /join?key=<key>
  Roles:          User
  Returns:        Name of project as an ASCII string.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not a member of the project.
                  [404 Not found]    if entry key is invalid.

- Send a message in a ticket group chat

  HTTP operation: POST
  Path:           /messages/{ticket}
  Roles:          Admin, User
  Request Body:   The chat message as ASCII text.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not a member of the associated project.
                  [404 Not found]    if ticket does not exist.

- Lists messages of a ticket group chat

  HTTP operation: GET
  Path:           /messages/{ticket}
  Roles:          Admin, User
  Returns:        JSON array of chat messages.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not a member of the associated project.
                  [404 Not found]    if ticket does not exist.

- Create user

  HTTP operation: POST
  Path:           /users
  Roles:          Admin
  Request-Body:   User information as JSON object.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user already exists or user information is invalid.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin.

- List users

  HTTP operation: GET
  Path:           /users
  Roles:          Admin
  Returns:        JSON array of users.
                  [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin.

- Create admin

  HTTP operation: POST
  Path:           /admins
  Roles:          Admin
  Request-Body:   Admin information as JSON object.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if admin already exists or admin information is invalid.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin.

- List admins

  HTTP operation: GET
  Path:           /admins
  Roles:          Admin
  Returns:        JSON array of admins.
                  [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized user is not an admin.
